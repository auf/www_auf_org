# encoding: utf-8

from django.core.exceptions import ObjectDoesNotExist

from haystack import indexes

from project.auf_site_institutionnel.models import \
    Bourse, Actualite, Appel_Offre, Evenement, Publication


class BourseIndex(indexes.SearchIndex, indexes.Indexable):
    text = indexes.CharField(document=True, use_template=True)
    title = indexes.CharField(model_attr='titre')
    bureaux = indexes.FacetMultiValueField(null=True, stored=True)
    annee = indexes.CharField(faceted=True, stored=True)
    section = indexes.CharField(faceted=True, stored=True)

    def get_model(self):
        return Bourse

    def get_url(self, obj):
        return obj.get_absolute_url()

    def prepare_bureaux(self, obj):
        try:
            return [b.nom for b in obj.bureau.all()]
        except ObjectDoesNotExist, e:
            print(e)
            return 'Non précisé'

    def prepare_annee(self, obj):
        if obj.date_pub is not None:
            return str(obj.date_pub.year)

    def prepare_section(self, obj):
        return "Bourse"

    def index_queryset(self,using=None):
        return Bourse.objects.filter(status='3')


class ActualiteIndex(indexes.SearchIndex, indexes.Indexable):
    text = indexes.CharField(document=True, stored=True)
    title = indexes.CharField(model_attr='titre')
    bureaux = indexes.FacetMultiValueField(null=True, stored=True)
    annee = indexes.CharField(faceted=True, stored=True)
    section = indexes.CharField(faceted=True, stored=True)
    partenaire = indexes.CharField(faceted=True, stored=True, null=True)

    def get_model(self):
        return Actualite

    def get_url(self, obj):
        return obj.get_absolute_url()

    def prepare_bureaux(self, obj):
        try:
            return [b.nom for b in obj.bureau.all()]
        except ObjectDoesNotExist, e:
            print(e)
            return 'Non précisé'

    def prepare_annee(self, obj):
        if obj.date_pub is not None:
            return str(obj.date_pub.year)

    def prepare_section(self, obj):
        return "Actualité"

    def index_queryset(self,using=None):
        return Actualite.objects.filter(status='3')


class Appel_OffreIndex(indexes.SearchIndex, indexes.Indexable):
    text = indexes.CharField(document=True, use_template=True)
    title = indexes.CharField(model_attr='titre')
    bureaux = indexes.FacetMultiValueField(null=True, stored=True)
    annee = indexes.CharField(faceted=True, stored=True)
    section = indexes.CharField(faceted=True, stored=True)
    partenaire = indexes.FacetMultiValueField()

    def get_model(self):
        return Appel_Offre

    def get_url(self, obj):
        return obj.get_absolute_url()

    def prepare_bureaux(self, obj):
        try:
            return [b.nom for b in obj.bureau.all()]
        except ObjectDoesNotExist, e:
            print(e)
            return 'Non précisé'

    def prepare_annee(self, obj):
        if obj.date_pub is not None:
            return str(obj.date_pub.year)

    def prepare_section(self, obj):
        return "Appel d\'offre"

    def prepare_partenaire(self, obj):
        if not obj.auf:
            return ['Partenaire']
        else:
            return 'AUF'

    def index_queryset(self,using=None):
        return Appel_Offre.objects.filter(status='3')


class EvenementIndex(indexes.SearchIndex, indexes.Indexable):
    text = indexes.CharField(document=True, use_template=True)
    title = indexes.CharField(model_attr='titre')
    bureaux = indexes.FacetMultiValueField(null=True, stored=True)
    annee = indexes.CharField(faceted=True, stored=True)
    section = indexes.CharField(faceted=True, stored=True)

    def get_model(self):
        return Evenement

    def prepare_bureaux(self, obj):
        try:
            return [b.nom for b in obj.bureau.all()]
        except ObjectDoesNotExist, e:
            print(e)
            return 'Non précisé'

    def prepare_annee(self, obj):
        if obj.date_pub is not None:
            return str(obj.date_pub.year)

    def prepare_section(self, obj):
        return "Événements"

    def index_queryset(self,using=None):
        return Evenement.objects.filter(status='3')


class PublicationIndex(indexes.SearchIndex, indexes.Indexable):
    text = indexes.CharField(document=True, use_template=True)
    title = indexes.CharField(model_attr='titre')
    bureaux = indexes.FacetMultiValueField(null=True, stored=True)
    annee = indexes.CharField(faceted=True, stored=True)
    section = indexes.CharField(faceted=True, stored=True)

    def get_model(self):
        return Publication

    def prepare_bureaux(self, obj):
        try:
            return [b.nom for b in obj.bureau.all()]
        except ObjectDoesNotExist, e:
            print(e)
            return 'Non précisé'

    def prepare_annee(self, obj):
        if obj.date_pub is not None:
            return str(obj.date_pub.year)

    def prepare_section(self, obj):
        return "Publication"

    def index_queryset(self,using=None):
        return Publication.objects.filter(status='3')
